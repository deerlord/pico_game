pico-8 cartridge // http://www.pico-8.com
version 34
__lua__


FLOOR_FLAG = 0
GRAVITY = .8
MAX_GRAVITY = 4


function _init()
  player = character(10, 10, 8, 6)
  player.y_spd = 3
  player.x_spd = 1
end

function _update()
  input()
  physics(player)
  move(player)
end

function _draw()
  cls()
  map()
  spr(1, player.x - 3, player.y - 3)
  pset(player.x, player.y, 10)
  print(time())
  print(player.state)
end

function input()
  -- states: 0 = air, >0 = ground, <0 = ???
  if player.state > 0
  then
    -- crouch
    if btnp(3)
    then
      player.state = 2
      player.x_spd *= .9
    elseif not btn(3)
    then
      player.state = 1
    end
    -- accelerate left
    if (btnp(0) or btn(0)) and player.state != 2
    then
      player.x_spd = max(-4, player.x_spd - 1)
    end
    -- accelerate right
    if (btnp(1) or btn(1)) and player.state != 2
    then
      player.x_spd = min(4, player.x_spd + 1)
    end
    -- jump  TO DO: figure out long hold jumps
    if btnp(2)
    then
      player.y_spd = -5
    end
  end
end

function character(x, y, height, width, facing)
  return {
    x = x,
    y = y,
    x_spd = 0,
    y_spd = 0,
    height = flr(height/2),
    width = flr(width/2),
    facing = (facing == nil) and facing or 270,
    state = 0
  }
end

-- control
function move(char)
  char.x += char.x_spd
  char.y += char.y_spd
end

function physics(char)
  if on_ground(char)
  then
    while on_ground(char, 0)
    do
      char.y -= 1
    end
    char.x_spd *= .7
    char.y_spd = min(char.y_spd, 0)
    if char.state < 1
    then
      char.state = 1
    end
  else
    char.x_spd *= .97
    char.y_spd = min(char.y_spd + GRAVITY, MAX_GRAVITY)
    char.state = 0
  end
end

-- collision
function on_ground(char, offset)
  -- get left/right tile x, tile y
  local offset = (offset == nil) and 1 or offset
  local lx, rx, ty = flr((char.x - char.width)/8), flr((char.x + char.width)/8), flr((char.y + char.height + offset)/8)
  -- check for floor flag at lx,ty, rx,ty
  return fget(mget(lx, ty),FLOOR_FLAG) or fget(mget(rx, ty),FLOOR_FLAG)
end




__gfx__
00000000080880803333333300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000808008083333333300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000080880803333333300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000808008080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000808008080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000080880800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000808008080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000080880800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__gff__
0000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0202020202020202020202020202020200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
